name: Publish to PyPI
on:
  release:
    types: [published]

jobs:
  pypi:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            label: linux-64
          - os: macos-latest
            cc: clang
            cxx: clang++
            label: osx-64
          - os: windows-latest
            cc: cl
            cxx: cl
            label: win-64

    name: ${{ matrix.label }}-Python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Poetry in Conda Environment
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry Env
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Build and Publish
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.python-version }}" == "3.11" ]]; then
            poetry build
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            poetry build -f wheel
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            poetry build -f wheel
          fi
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN_SEISOPT }}
          poetry publish
